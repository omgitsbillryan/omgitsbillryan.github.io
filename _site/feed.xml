<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-10-25T23:19:26-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">OMG! It’s Bill Ryan!</title><subtitle>Ramblings on the day-to-day findings of a software engineer</subtitle><entry><title type="html">Introducing Count Dat Coin!</title><link href="http://localhost:4000/count-dat-coin/" rel="alternate" type="text/html" title="Introducing Count Dat Coin!" /><published>2021-10-19T20:15:00-04:00</published><updated>2021-10-19T20:15:00-04:00</updated><id>http://localhost:4000/count-dat-coin</id><content type="html" xml:base="http://localhost:4000/count-dat-coin/">&lt;h2 id=&quot;calculating-my-crypto-value&quot;&gt;Calculating my Crypto Value&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/count_my_crypto.JPG&quot; alt=&quot;countmycrypto.com&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a while I’ve used &lt;a href=&quot;https://www.countmycrypto.com&quot;&gt;https://www.countmycrypto.com&lt;/a&gt; to loosely track the value of my
crypto holdings. I always felt a bit uneasy about it (as I with anything crypto-related).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:fearful: &lt;strong&gt;&lt;em&gt;Is my data being stored somewhere?&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;:cold_sweat: &lt;strong&gt;&lt;em&gt;Am I being tracked?&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;:scream: &lt;strong&gt;&lt;em&gt;Is someone else looking at my data?&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s hard &lt;em&gt;not&lt;/em&gt; to be paranoid when holding crypto. Unlike being reimbursed by your 
bank when your credit card gets stolen, no one is going to save you if &amp;amp; when you get 
scammed out of your crypto.&lt;/p&gt;

&lt;h2 id=&quot;introducing-count-dat-coin&quot;&gt;Introducing Count Dat Coin&lt;/h2&gt;

&lt;p&gt;The aim is to put the user at ease with respect data ownership and transparency.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The app does not use server-side storage of any kind - no postgres &amp;amp; not even redis&lt;/li&gt;
  &lt;li&gt;The app is &lt;a href=&quot;https://github.com/omgitsbillryan/count-dat-coin&quot;&gt;open source and can be reviewed by anyone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;current-status&quot;&gt;Current Status&lt;/h2&gt;

&lt;p&gt;The app is deployed in Heroku 
&lt;a href=&quot;https://count-dat-coin.herokuapp.com/&quot;&gt;https://count-dat-coin.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/count_dat_coin.JPG&quot; alt=&quot;count-dat-coin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Crypto prices are fetched every 10 minutes from the CoinMarketCap API. The top 
10 cryptos by market cap value are supported.&lt;/p&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Basic styling - including logos for each of the addedcryptos&lt;/li&gt;
  &lt;li&gt;Add support for all cryptos listed on CoinMarketCap.com using an auto-complete styled
text box&lt;/li&gt;
  &lt;li&gt;Change the name&lt;/li&gt;
  &lt;li&gt;Register a custom domain&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Calculating my Crypto Value</summary></entry><entry><title type="html">Versioning External Dependencies</title><link href="http://localhost:4000/versioning-your-dependencies/" rel="alternate" type="text/html" title="Versioning External Dependencies" /><published>2021-10-11T22:17:00-04:00</published><updated>2021-10-11T22:17:00-04:00</updated><id>http://localhost:4000/versioning-your-libs</id><content type="html" xml:base="http://localhost:4000/versioning-your-dependencies/">&lt;h2 id=&quot;what-happened&quot;&gt;What Happened&lt;/h2&gt;

&lt;p&gt;I recently encountered an outaged caused by an external library called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-exporter&lt;/code&gt;.
The library was used to track a few simple metrics about GitHub usage. The ansible code 
looked something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install github-exporter&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;docker_container&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;infinityworks/github-exporter:latest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This worked great for about a year and then one afternoon… :boom:. 
Suddenly, the 5,000 GitHub API hourly quota was being eaten up inside 5 minutes!&lt;/p&gt;

&lt;h2 id=&quot;the-root-cause&quot;&gt;The Root Cause&lt;/h2&gt;

&lt;p&gt;A new image of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infinityworks/github-exporter&lt;/code&gt; was released to dockerhub. The
new version changed the default GitHub API pagination behavior. Since the version
was set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:latest&lt;/code&gt;, ansible happily consumed &amp;amp; deployed the latest docker image.&lt;/p&gt;

&lt;h2 id=&quot;versioning-options&quot;&gt;Versioning Options&lt;/h2&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:latest&lt;/code&gt; is clearly not suited for production-level 
software where stability is paramount. The strictest option would be to use
a git commit SHA, e.g.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;infinityworks/github-exporter@sha256:46e0c757cfcea569501c77ba7e6f72c80123e2a4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This has it’s own tradeoff as you’re no longer receiving potential security patches
for free. The middleground is to use a tag name like so,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-`&quot;&gt;infinityworks/github-exporter:1.0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep in mind that it’s still possible for &lt;a href=&quot;https://rockbag.medium.com/why-you-should-pin-your-docker-images-with-sha-instead-of-tags-fd132443b8a6&quot;&gt;new commits to be made to the underlying
git code w/o the dockerhub image version changing&lt;/a&gt;, so it’s
not exactly a silver bullet.&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h2&gt;

&lt;p&gt;In the end, it’s up to you the developer to chose the proper version for your given
situation - choose wisely.&lt;/p&gt;</content><author><name></name></author><summary type="html">What Happened</summary></entry><entry><title type="html">Daisy Chain Anti-Pattern</title><link href="http://localhost:4000/daisy-chain-antipattern/" rel="alternate" type="text/html" title="Daisy Chain Anti-Pattern" /><published>2021-08-27T15:18:22-04:00</published><updated>2021-08-27T15:18:22-04:00</updated><id>http://localhost:4000/daisy-chain-antipattern</id><content type="html" xml:base="http://localhost:4000/daisy-chain-antipattern/">&lt;p&gt;There’s an anti-pattern that I often encounter, I call it “The Daisy Chain”. Code that
follows this anti-pattern often looks neat and tidy on the surface.&lt;/p&gt;

&lt;h1 id=&quot;this-doesnt-seem-so-bad&quot;&gt;This Doesn’t Seem so Bad…&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThingsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thing_getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ThingGetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thing_getter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_all&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;“Seems like a lean controller” you admit to yourself… but then you drill into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;things_getter.rb&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-closer-look&quot;&gt;A Closer look&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThingGetter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# *validate stuff*
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log_stuff&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log_stuff&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# *log stuff*
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_thing_a&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_thing_a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_request_a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_thing_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_thing_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_request_b&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;things: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;:scream: :scream: :scream:&lt;/p&gt;

&lt;p&gt;This code has problems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Abstractions don’t make sense&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_all&lt;/code&gt; &lt;em&gt;does not&lt;/em&gt; in fact return “all things”, it returns “validate” :man_shrugging:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Functions are not reusable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not possible to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_stuff&lt;/code&gt; without also calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_thing_a&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;There’s Hidden Gotchas&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you look at the controller and see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing_getter.get_all&lt;/code&gt;, you quickly assume that it’s getting all the things. In reality it’s doing a lot more than that.&lt;/p&gt;

&lt;h1 id=&quot;how-to-avoid-this&quot;&gt;How To Avoid This&lt;/h1&gt;

&lt;p&gt;When code comes out as a stream of conciousness, a developer may simply make a new function when 
the prior function gets too big which results in this function “chaining” effect. Most coding I’ve 
done in practice has been reading &amp;amp; modifying code that wasn’t my own. Do yourfellow developers 
a solid and consider the high-level abstractions at play and encapsulate them properly.&lt;/p&gt;</content><author><name></name></author><summary type="html">There’s an anti-pattern that I often encounter, I call it “The Daisy Chain”. Code that follows this anti-pattern often looks neat and tidy on the surface. This Doesn’t Seem so Bad… class ThingsController &amp;lt; ApplicationController def index thing_getter = ThingGetter.new thing_getter.get_all end end “Seems like a lean controller” you admit to yourself… but then you drill into things_getter.rb. A Closer look class ThingGetter def get_all validate end private def validate # *validate stuff* log_stuff end def log_stuff # *log stuff* get_thing_a end def get_thing_a a = external_request_a get_thing_b(a) end def get_thing_b(a) b = external_request_b {things: {a: a, b: b}} end end :scream: :scream: :scream: This code has problems. Abstractions don’t make sense get_all does not in fact return “all things”, it returns “validate” :man_shrugging: Functions are not reusable It’s not possible to call log_stuff without also calling get_thing_a. There’s Hidden Gotchas When you look at the controller and see thing_getter.get_all, you quickly assume that it’s getting all the things. In reality it’s doing a lot more than that. How To Avoid This When code comes out as a stream of conciousness, a developer may simply make a new function when the prior function gets too big which results in this function “chaining” effect. Most coding I’ve done in practice has been reading &amp;amp; modifying code that wasn’t my own. Do yourfellow developers a solid and consider the high-level abstractions at play and encapsulate them properly.</summary></entry></feed>