<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-10-11T21:51:14-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">OMG! It’s Bill Ryan!</title><subtitle>Ramblings on the day-to-day findings I encounter while coding.</subtitle><entry><title type="html">Daisy Chain Anti-Pattern</title><link href="http://localhost:4000/daisy-chain-antipattern/" rel="alternate" type="text/html" title="Daisy Chain Anti-Pattern" /><published>2021-10-06T15:18:22-04:00</published><updated>2021-10-06T15:18:22-04:00</updated><id>http://localhost:4000/daisy-chain-antipattern</id><content type="html" xml:base="http://localhost:4000/daisy-chain-antipattern/">&lt;p&gt;There’s an anti-pattern that I often encounter, I call it “The Daisy Chain”. Code that
follows this anti-pattern often looks neat and tidy on the surface.&lt;/p&gt;

&lt;h1 id=&quot;this-doesnt-seem-so-bad&quot;&gt;This Doesn’t Seem so Bad…&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThingsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thing_getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ThingGetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thing_getter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_all&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;“Seems like a lean controller” you admit to yourself… but then you drill into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;things_getter.rb&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-horror&quot;&gt;The Horror&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThingGetter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# *validate stuff*
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log_stuff&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log_stuff&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# *log stuff*
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_thing_a&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_thing_a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_request_a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_thing_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_thing_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_request_b&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;things: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;:scream: :scream: :scream:&lt;/p&gt;

&lt;p&gt;This code has problems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Abstractions don’t make sense&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_all&lt;/code&gt; &lt;em&gt;does not&lt;/em&gt; in fact return “all things”, it returns “validate” :man_shrugging:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Functions are not reusable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not possible to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_stuff&lt;/code&gt; without also calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_thing_a&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;There’s Hidden Gotchas&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you look at the controller and see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing_getter.get_all&lt;/code&gt;, you quickly assume that it’s getting all the things. In reality it’s doing a lot more than that.&lt;/p&gt;

&lt;h1 id=&quot;how-to-avoid-this&quot;&gt;How To Avoid This&lt;/h1&gt;

&lt;p&gt;When code comes out as a stream of conciousness, a developer may simply make a new function when 
the prior function gets too big which results in this function “chaining” effect. Most coding I’ve 
done in practice has been reading &amp;amp; modifying code that wasn’t my own. Do yourfellow developers 
a solid and consider the high-level abstractions at play and encapsulate them properly.&lt;/p&gt;</content><author><name></name></author><summary type="html">There’s an anti-pattern that I often encounter, I call it “The Daisy Chain”. Code that follows this anti-pattern often looks neat and tidy on the surface. This Doesn’t Seem so Bad… class ThingsController &amp;lt; ApplicationController def index thing_getter = ThingGetter.new thing_getter.get_all end end “Seems like a lean controller” you admit to yourself… but then you drill into things_getter.rb. The Horror class ThingGetter def get_all validate end private def validate # *validate stuff* log_stuff end def log_stuff # *log stuff* get_thing_a end def get_thing_a a = external_request_a get_thing_b(a) end def get_thing_b(a) b = external_request_b {things: {a: a, b: b}} end end :scream: :scream: :scream: This code has problems. Abstractions don’t make sense get_all does not in fact return “all things”, it returns “validate” :man_shrugging: Functions are not reusable It’s not possible to call log_stuff without also calling get_thing_a. There’s Hidden Gotchas When you look at the controller and see thing_getter.get_all, you quickly assume that it’s getting all the things. In reality it’s doing a lot more than that. How To Avoid This When code comes out as a stream of conciousness, a developer may simply make a new function when the prior function gets too big which results in this function “chaining” effect. Most coding I’ve done in practice has been reading &amp;amp; modifying code that wasn’t my own. Do yourfellow developers a solid and consider the high-level abstractions at play and encapsulate them properly.</summary></entry></feed>